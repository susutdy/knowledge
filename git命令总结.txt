git init		 (创建版本库)
git add  文件名		 (将文件加到暂存区。或没跟踪的文件变成跟踪)
git commit -m '提示内容' (将暂存去的内容添加到版本库)

git log                  (查看提交历史) 
git reflog 		 (查看命令历史)
git log --pretty=oneline (查看提交历史)
git reflog		 (记录的每一次命令) 

git checkout -- 文件名   (丢弃工作区的修改,用版本库的内容替换)
git status    		 (查看当前仓库状态)
git diff  文件名	 (文件做比较)
git rm 文件名		 (删掉版本库的文件)
 		
git reset --hard head^   (会到上一个版本)
git reset --hard command的id (回到指定的版本)
git reset head 文件名	 (清空该文件在暂存区的内容)

git remote add origin git@server-name:path/repo-name.git (本地仓库关联远程库,origin为自定义)
git push -u origin master				 (把本地的master分支推送到远程库,第一次推送用-u)
git push origin master   				 (第二次以后可去掉参数-u)
git remote rm 远程名称（比如：origin）			 (删除一个关联的远程库名称)
git remote -v						 (列出关联的远程库名称)

git clone git@server-name:path/repo-name.git 		 (将一个远程库的克隆到本地,默认克隆master的分支)
git checkout -b dev origin/dev				 (本地创建一个分支，切换到该分支，将一个远程库的分支关联到本地分支)
git log --graph						 (查看分支合并图)
git merge --no-ff -m "merge with no-ff" 分支名称

git stash   						  (未提交内容，但保存了)
git stash apply stash@{n}				  (可选择的恢复现场)
git stash list						  (查看保存的列表)
git stash apply						  (恢复最近保存的内容，继续编辑)
git stash drop						  (删除保存的内容)
git stash pop						 （恢复保存的内容，并删除内容）
git tag 版本名称(为分支添加版本)
git tag 版本名称 commitID
git show 版本名称
git tag -d 版本名称
git push origin 版本名称				 (推送某个标签到远程)
git push origin --tags 					 (一次性推送全部尚未推送到远程的本地标签)
git tag -d v0.9						 (删除本地标签)
git push origin :refs/tags/v0.9				 (删除远程标签)
git branch -d 分支名称					 (删除分支)
git branch -D 分支名称					 (强制删除分支)

git pull   (抓取最新的提交)
git branch --set-upstream dev origin/dev   (指定本地分支与远程分支的连接)

git reset HEAD readme.txt		   (清空readme.txt在暂存区里的内容)

git branch (查看分支)
git branch name (创建分支)
git branch -d name (删除分支)
git checkout name (切换分支,文件夹的内容会做相应的改变)
git checkout -b name (切换加创建)
git merge name (合并分支到当前分支)
git branch -m 原分支名 新分支名 (重命名分支)

git push --delete origin dev (删除远程库分支)



什么是版本库
什么是工作区和暂存区
